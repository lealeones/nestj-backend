// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RolUser {
  ADMINISTRADOR
  SECRETARIA
  REVISOR
  ESTUDIANTE
  OTROS
}

model File {
  id           Int       @id @default(autoincrement())
  fileName     String
  originalName String
  fileHash     String
  dateUpload   DateTime?
}

model ContactLocation {
  id         Int      @id @default(autoincrement())
  location   Location @relation(fields: [idLocation], references: [id])
  idLocation Int      @unique
  telWsp     String
  tel        String
  email      String
  web        String
  linkFb     String
  linkIg     String
  coord      Int[]
}

model FiltersLocation {
  id         Int      @id @default(autoincrement())
  location   Location @relation(fields: [idLocation], references: [id])
  idLocation Int      @unique
  start      Int
  ranking    Int
}

model Location {
  id          Int              @id @default(autoincrement())
  title       String
  description String
  image       String?
  tipe        String
  url         String?
  mediaVideo  String?
  filters     FiltersLocation?
  contact     ContactLocation?
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  pwd       String
  mail      String
  name      String
  lastname  String
  rol       RolUser   @default(OTROS)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  student   Student?
  reviewer  Reviewer?
}

// Define la tabla Alumnos
model Student {
  id        Int      @id @default(autoincrement())
  phone     String
  mobile    String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// // Define la tabla Revisores
model Reviewer {
  id        Int      @id @default(autoincrement())
  titulo    String?
  cv_path   String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
